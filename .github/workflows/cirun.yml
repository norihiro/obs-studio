name: 'OBS Studio CI run'

on:
  push:
    branches: ['*']
  schedule:
  - cron: 12 4 * * *
  workflow_dispatch:

jobs:
  linux_run:
    runs-on: 'ubuntu-22.04'
    defaults:
      run:
        shell: bash

    steps:
      - name: 'Checkout run-script'
        uses: actions/checkout@v3

      - uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: 'Restore obs-studio directory'
        id: obs-studio-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-studio
          key: obs-studio

      - name: 'Restore obs-build-dependencies directory'
        id: obs-build-dependencies-cache
        if: github.event_name != 'schedule'
        uses: actions/cache/restore@v3
        with:
          path: obs-build-dependencies
          key: obs-build-dependencies

      - name: 'Checkout obs-studio'
        uses: actions/checkout@v3
        with:
          repository: 'obsproject/obs-studio'
          path: 'obs-studio'
          submodules: 'recursive'
          fetch-depth: 0
          clean: false

      - name: 'Setup build environment'
        id: setup
        run: |
          (cd obs-studio && git pull && git submodule update --recursive)
          echo "obsHash=$(cd obs-studio && git rev-parse --short=9 HEAD)" >> $GITHUB_OUTPUT

      - name: 'Restore ccache'
        id: ccache-cache
        uses: actions/cache/restore@v3
        with:
          path: ${{ github.workspace }}/.ccache
          key: cirun-ccache

      - name: 'Configure and build obs-studio'
        run: |
          set -ex
          script/workflow2env.py -w obs-studio/.github/workflows/main.yml -j linux_build -e CEF_BUILD_VERSION_LINUX > build.env
          . build.env
          cd obs-studio
          patch -p1 < ../patch/cmake-coverage.patch
          export RESTORED_CEF=''
          bash -x CI/build-linux.sh

      - name: 'Save ccache'
        uses: actions/cache/save@v3
        if: always()
        with:
          path: ${{ github.workspace }}/.ccache
          key: cirun-ccache

      - name: 'Save obs-studio build directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-studio-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-studio
          key: obs-studio

      - name: 'Restore obs-build-dependencies directory'
        uses: actions/cache/save@v3
        if: ${{ steps.obs-build-dependencies-cache.outputs.cache-hit != 'true' }}
        with:
          path: obs-build-dependencies
          key: obs-build-dependencies

      - name: 'Install obs-studio and test suites'
        run: |
          set -e

          (cd obs-studio && sudo cmake --install build)

          apt_packages=(
            apt-transport-https gnupg
            xvfb
            python3-pip
            python3-pil
            python3-tk python3-dev
            python3-tesserocr
            scrot
            lcov
          )
          sudo apt install -y "${apt_packages[@]}"
          pip3 install -U -r cirun/requirements.txt

          curl -L https://notesalexp.org/debian/alexp_key.asc | sudo apt-key add -
          sudo tee -a /etc/apt/sources.list <<<"deb https://notesalexp.org/tesseract-ocr5/jammy/ jammy main"
          sudo apt update
          sudo apt install -y tesseract-ocr tesseract-ocr-eng

          git clone https://github.com/norihiro/untriseptium.git
          (cd untriseptium && pip3 install -U ./)

      - name: 'Run first time'
        run: |
          mkdir screenshot
          timeout 3m xvfb-run cirun/obs-firsttime.py

      - name: 'Gather coverage data'
        if: always()
        run: |
          set -e
          cd obs-studio
          lcov \
            --exclude '/usr/*' \
            --exclude '*_autogen/*' \
            --exclude '${{ github.workspace }}/obs-build-dependencies/*' \
            --exclude 'deps/*' \
            --exclude 'build/deps/*' \
            --exclude 'plugins/decklink/linux/decklink-sdk/*' \
            --exclude 'plugins/obs-browser/deps/*' \
            -c -d . -o lcov.info
          genhtml lcov.info -o ../coverage/

      - name: 'Gather log files'
        if: always()
        run: |
          mv $HOME/.config/obs-studio/logs .

      - name: 'Upload log files'
        if: always()
        env:
          CIRUN_DEPLOY_SSHKEY: ${{ secrets.CIRUN_DEPLOY_SSHKEY }}
          CIRUN_DEPLOY_HOSTKEY: ${{ secrets.CIRUN_DEPLOY_HOSTKEY }}
          CIRUN_DEPLOY_TARGET: ${{ secrets.CIRUN_DEPLOY_TARGET }}
        run: |
          set +x
          mkdir -m 700 -p ~/.ssh
          echo "${CIRUN_DEPLOY_SSHKEY}" | base64 -d > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${CIRUN_DEPLOY_HOSTKEY}" | base64 -d >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts
          rsync -av logs screenshot coverage "${CIRUN_DEPLOY_TARGET}"

      - name: 'Upload results'
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: 'obs-studio-cirun-${{ steps.setup.outputs.obsHash }}'
          path: |
            screenshot/
            logs/
            coverage/
